"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[786],{4722:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ebms-core/properties","title":"Default Properties","description":"Below the contents of ebms-core\'s default.properties file. These are the default settings for ebms-core.","source":"@site/versioned_docs/version-2.19.x/ebms-core/properties.md","sourceDirName":"ebms-core","slug":"/ebms-core/properties","permalink":"/ebms-admin/docs/ebms-core/properties","draft":false,"unlisted":false,"editUrl":"https://github.com/eluinstra/ebms-admin/tree/documentation/versioned_docs/version-2.19.x/ebms-core/properties.md","tags":[],"version":"2.19.x","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Development","permalink":"/ebms-admin/docs/ebms-core/development"},"next":{"title":"Database support","permalink":"/ebms-admin/docs/ebms-core/database"}}');var t=s(4848),i=s(8453);const a={sidebar_position:4},o="Default Properties",l={},c=[{value:"Cache",id:"cache",level:3},{value:"Database",id:"database",level:3},{value:"Database Connection Pool",id:"database-connection-pool",level:3},{value:"DeliveryManager",id:"deliverymanager",level:3},{value:"DeliveryTaskHandler",id:"deliverytaskhandler",level:3},{value:"DeliveryTaskManager",id:"deliverytaskmanager",level:3},{value:"EbMS Core",id:"ebms-core",level:3},{value:"EbMS Message Storage",id:"ebms-message-storage",level:3},{value:"Encryption keystore",id:"encryption-keystore",level:3},{value:"EventListener",id:"eventlistener",level:3},{value:"Forward Proxy",id:"forward-proxy",level:3},{value:"HTTPClient",id:"httpclient",level:3},{value:"HTTP Errors",id:"http-errors",level:3},{value:"JMS",id:"jms",level:3},{value:"Overflow attachments to disk",id:"overflow-attachments-to-disk",level:3},{value:"Signature keystore",id:"signature-keystore",level:3},{value:"SSL",id:"ssl",level:3},{value:"SSL Client keystore",id:"ssl-client-keystore",level:3},{value:"TransactionManager",id:"transactionmanager",level:3},{value:"Truststore",id:"truststore",level:3},{value:"Microsoft Azure Key Vault based keystore",id:"microsoft-azure-key-vault-based-keystore",level:3},{value:"Apache Kafka",id:"apache-kafka",level:3}];function d(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"default-properties",children:"Default Properties"})}),"\n",(0,t.jsxs)(r.p,{children:["Below the contents of ebms-core's ",(0,t.jsx)(r.a,{href:"https://github.com/eluinstra/ebms-core/blob/ebms-core-2.19.x/src/main/resources/nl/clockwork/ebms/default.properties",children:"default.properties"})," file. These are the default settings for ebms-core."]}),"\n",(0,t.jsx)(r.h3,{id:"cache",children:"Cache"}),"\n",(0,t.jsxs)(r.p,{children:["Set ",(0,t.jsx)(r.code,{children:"cache.type"})," to ",(0,t.jsx)(r.code,{children:"IGNITE"})," or ",(0,t.jsx)(r.code,{children:"EHCACHE"})," when you are ",(0,t.jsx)(r.a,{href:"/ebms-admin/docs/ebms-admin/deployment#scaling",children:"scaling"})," the EbMS Adapter, otherwise leave it set to ",(0,t.jsx)(r.code,{children:"DEFAULT"}),". You can also disable caching by setting ",(0,t.jsx)(r.code,{children:"cache.type"})," to ",(0,t.jsx)(r.code,{children:"NONE"}),", but this is not adviced. The scaling configuration for ",(0,t.jsx)(r.code,{children:"IGNITE"})," works out of the box, the scaling configuration for ",(0,t.jsx)(r.code,{children:"EHCACHE"})," you have to configure yourself. You can find the default configuration file for ",(0,t.jsx)(r.code,{children:"IGNITE"})," ",(0,t.jsx)(r.a,{href:"https://github.com/eluinstra/ebms-core/blob/ebms-core-2.19.x/src/main/resources/nl/clockwork/ebms/ignite.xml",children:"here"})," and you can find the default configuration file for ",(0,t.jsx)(r.code,{children:"EHCACHE"})," ",(0,t.jsx)(r.a,{href:"https://github.com/eluinstra/ebms-core/blob/ebms-core-2.19.x/src/main/resources/nl/clockwork/ebms/ehcache.xml",children:"here"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# CacheType: NONE | DEFAULT (SPRING) | EHCACHE | IGNITE\ncache.type=DEFAULT\ncache.configLocation=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"database",children:"Database"}),"\n",(0,t.jsxs)(r.p,{children:["See ",(0,t.jsx)(r.a,{href:"database",children:"here"})," for the supported databases."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"ebms.jdbc.driverClassName=org.hsqldb.jdbcDriver\nebms.jdbc.url=jdbc:hsqldb:mem:ebms\nebms.jdbc.username=sa\nebms.jdbc.password=\nebms.jdbc.update=false\nebms.jdbc.strict=false\n"})}),"\n",(0,t.jsx)(r.h3,{id:"database-connection-pool",children:"Database Connection Pool"}),"\n",(0,t.jsxs)(r.p,{children:["Set ",(0,t.jsx)(r.code,{children:"ebms.pool.minPoolSize"})," and ",(0,t.jsx)(r.code,{children:"ebms.pool.maxPoolSize"})," to your needs. Do not set ",(0,t.jsx)(r.code,{children:"ebms.pool.testQuery"})," if you are using a JDBC 4 compliant driver. The rest of the defaults should be fine."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"ebms.pool.autoCommit=true\nebms.pool.connectionTimeout=30000\nebms.pool.maxIdleTime=600000\nebms.pool.maxLifetime=1800000\nebms.pool.testQuery=\nebms.pool.minPoolSize=16\nebms.pool.maxPoolSize=32\n"})}),"\n",(0,t.jsx)(r.h3,{id:"deliverymanager",children:"DeliveryManager"}),"\n",(0,t.jsxs)(r.p,{children:["The DeliveryManager is used to handle EbMS ",(0,t.jsx)(r.a,{href:"api#pingcpaid-frompartyid-topartyid",children:"Ping"})," and ",(0,t.jsx)(r.a,{href:"api#getmessagestatusmessageid",children:"getMessageStatus"})," calls. Set ",(0,t.jsx)(r.code,{children:"deliveryManager.type"})," to ",(0,t.jsx)(r.code,{children:"JMS"})," when you are ",(0,t.jsx)(r.a,{href:"/ebms-admin/docs/ebms-admin/deployment#scaling",children:"scaling"})," the EbMS Adapter, otherwise leave it set to ",(0,t.jsx)(r.code,{children:"DEFAULT"}),". When ",(0,t.jsx)(r.code,{children:"deliveryManager.type=JMS"})," configure ",(0,t.jsx)(r.a,{href:"#jms",children:"JMS"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# DeliveryManagerType: DEFAULT (DAO) | JMS\ndeliveryManager.type=DEFAULT\ndeliveryManager.minThreads=2\ndeliveryManager.maxThreads=8\nmessageQueue.maxEntries=64\nmessageQueue.timeout=30000\n"})}),"\n",(0,t.jsx)(r.h3,{id:"deliverytaskhandler",children:"DeliveryTaskHandler"}),"\n",(0,t.jsxs)(r.p,{children:["The DeliveryTaskHandler is used to ",(0,t.jsx)(r.a,{href:"api#sendmessagemessage",children:"send EbMS Messages"})," asynchronously. Set ",(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})," to ",(0,t.jsx)(r.code,{children:"JMS"}),", ",(0,t.jsx)(r.code,{children:"QUARTZ"})," or ",(0,t.jsx)(r.code,{children:"QUARTZ_JMS"})," when you are using ",(0,t.jsx)(r.a,{href:"/ebms-admin/docs/ebms-admin/deployment#advanced-scaling",children:"advanced scaling"}),", otherwise leave it set to ",(0,t.jsx)(r.code,{children:"DEFAULT"})," or set it to ",(0,t.jsx)(r.code,{children:"QUARTZ"}),". When ",(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})," is set to ",(0,t.jsx)(r.code,{children:"JMS"})," or ",(0,t.jsx)(r.code,{children:"QUARTZ_JMS"})," configure ",(0,t.jsx)(r.a,{href:"#jms",children:"JMS"})," and the ",(0,t.jsx)(r.a,{href:"#transactionmanager",children:"TransactionManager"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# DeliveryTaskHandlerType: DEFAULT (DAO) | JMS | QUARTZ | QUARTZ_JMS\ndeliveryTaskHandler.start=true\ndeliveryTaskHandler.type=DEFAULT\ndeliveryTaskHandler.minThreads=16\ndeliveryTaskHandler.maxThreads=16\ndeliveryTaskHandler.default.maxTasks=100\ndeliveryTaskHandler.default.executionInterval=1000\ndeliveryTaskHandler.jms.destinationName=\ndeliveryTaskHandler.jms.receiveTimeout=3000\ndeliveryTaskHandler.quartz.driverDelegateClass=\ndeliveryTaskHandler.quartz.isClustered=false\ndeliveryTaskHandler.quartz.jdbc.driverClassName=\ndeliveryTaskHandler.quartz.jdbc.selectWithLockSQL=\ndeliveryTaskHandler.task.executionInterval=0\n"})}),"\n",(0,t.jsx)(r.h3,{id:"deliverytaskmanager",children:"DeliveryTaskManager"}),"\n",(0,t.jsxs)(r.p,{children:["It is possible to retry sending best-effort messages after a technical error (like a connection error). ",(0,t.jsx)(r.code,{children:"ebmsMessage.nrAutoRetries"})," sets the maximum number of retries. ",(0,t.jsx)(r.code,{children:"ebmsMessage.autoRetryInterval"})," sets the retry interval in minutes."]}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsx)(r.p,{children:"This is not according to the EbMS Specifications, but will not violate them either."})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"deliveryTaskManager.nrAutoRetries=0\ndeliveryTaskManager.autoRetryInterval=5\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ebms-core",children:"EbMS Core"}),"\n",(0,t.jsxs)(r.p,{children:["You have to set ",(0,t.jsx)(r.code,{children:"ebms.serverId"})," with a unique serverId per server when you are ",(0,t.jsx)(r.a,{href:"/ebms-admin/docs/ebms-admin/deployment#scaling-with-serverid",children:"scaling with serverId"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"ebms.serverId=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ebms-message-storage",children:"EbMS Message Storage"}),"\n",(0,t.jsxs)(r.p,{children:["If ",(0,t.jsx)(r.code,{children:"deleteContentOnProcessed=true"})," then the attachments of a received message are deleted right after it has been processed and the attachments of a sent message are deleted right after it has been acknowledged (failed or expired).",(0,t.jsx)(r.br,{}),"\n","If ",(0,t.jsx)(r.code,{children:"ebmsMessage.storeDuplicateContent=false"})," then the attachments of a duplicate message are not stored. If ",(0,t.jsx)(r.code,{children:"ebmsMessage.storeDuplicate=false"})," then the whole duplicate message is not stored."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"ebmsMessage.deleteContentOnProcessed=false\nebmsMessage.storeDuplicate=true\nebmsMessage.storeDuplicateContent=true\n"})}),"\n",(0,t.jsx)(r.h3,{id:"encryption-keystore",children:"Encryption keystore"}),"\n",(0,t.jsx)(r.p,{children:"Holds the different encryption keys (and related certificates) of the encryption certificates defined in the different CPAs the EbMS adapter is using."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# KeystoreType: JCEKS | JKS | DKS | PKCS11 | PKCS12\nencryption.keystore.type=PKCS12\nencryption.keystore.path=nl/clockwork/ebms/keystore.p12\nencryption.keystore.password=password\nencryption.keystore.keyPassword=${encryption.keystore.password}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"eventlistener",children:"EventListener"}),"\n",(0,t.jsxs)(r.p,{children:["When receiving a message a ",(0,t.jsx)(r.code,{children:"RECEIVE"})," event is generated. After a message is sent, a ",(0,t.jsx)(r.code,{children:"DELIVERED"}),", ",(0,t.jsx)(r.code,{children:"FAILED"})," or ",(0,t.jsx)(r.code,{children:"EXPIRED"})," event is generated. By ",(0,t.jsx)(r.code,{children:"DEFAULT"})," these events are logged to file, but it is also possible to persist and consume these events. For that you can choose from the EventListenerTypes"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"DAO"})," which stores it to database"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"SIMPLE_JMS"})," which stores the messageId to JMS"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"JMS"})," which stores all message properties to JMS"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"JMS_TEXT"})," which stores all message properties to JMS as a text message"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"DAO"})," is selected, you can get the events by calling ",(0,t.jsx)(r.a,{href:"api#getunprocessedmessageeventsmessagefilter-eventtypes-maxnr",children:"getUnProcessedEvents"}),". When one of the JMS listeners is selected, you can get the events by listening to a ",(0,t.jsx)(r.code,{children:"QUEUE"})," or ",(0,t.jsx)(r.code,{children:"TOPIC"})," depending on the ",(0,t.jsx)(r.code,{children:"destinationType"}),". You then also have to configure ",(0,t.jsx)(r.a,{href:"#jms",children:"JMS"}),". Events can be filtered by providing a comma separated list of events to be filtered out in ",(0,t.jsx)(r.code,{children:"eventListener.filter"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# EventListenerType: DEFAULT (LOGGING) | DAO | SIMPLE_JMS | JMS | JMS_TEXT\neventListener.type=DEFAULT\neventListener.filter=\n# DestinationType: QUEUE | TOPIC\neventListener.jms.destinationType=QUEUE\n"})}),"\n",(0,t.jsx)(r.h3,{id:"forward-proxy",children:"Forward Proxy"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"http.proxy.host=\nhttp.proxy.port=0\nhttp.proxy.nonProxyHosts=127.0.0.1,localhost\nhttp.proxy.username=\nhttp.proxy.password=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"httpclient",children:"HTTPClient"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"http.connectTimeout=30000\nhttp.readTimeout=30000\n"})}),"\n",(0,t.jsx)(r.h3,{id:"http-errors",children:"HTTP Errors"}),"\n",(0,t.jsxs)(r.p,{children:["Defines the recoverable and unrecoverable errors to determine the unrecoverable errors on which the EbMS adapter will let a sent message fail.",(0,t.jsx)(r.br,{}),"\n","By default the EbM adapter will fail on all recoverable errors except for ",(0,t.jsx)(r.code,{children:"408"})," and ",(0,t.jsx)(r.code,{children:"429"})," and will only fail on unrecoverable errors ",(0,t.jsx)(r.code,{children:"501"}),", ",(0,t.jsx)(r.code,{children:"505"})," and ",(0,t.jsx)(r.code,{children:"510"}),". Recoverable errors are ",(0,t.jsx)(r.code,{children:"1xx"}),", ",(0,t.jsx)(r.code,{children:"3xx"})," and ",(0,t.jsx)(r.code,{children:"4xx"})," errors. Unrecoverable errors are ",(0,t.jsx)(r.code,{children:"5xx"})," errors."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"http.errors.informational.recoverable=\nhttp.errors.redirection.recoverable=\nhttp.errors.client.recoverable=408,429\nhttp.errors.server.unrecoverable=501,505,510\n"})}),"\n",(0,t.jsx)(r.h3,{id:"jms",children:"JMS"}),"\n",(0,t.jsxs)(r.p,{children:["JMS can be used by the ",(0,t.jsx)(r.a,{href:"#deliverytaskhandler",children:"DeliveryTaskHandler"}),", the ",(0,t.jsx)(r.a,{href:"#deliverymanager",children:"DeliveryManager"})," and the ",(0,t.jsx)(r.a,{href:"#eventlistener",children:"EventListener"}),". By default the ",(0,t.jsx)(r.code,{children:"jms.brokerURL=vm://localhost"})," setting starts a persistent ActiveMQ broker that stores its data in the folder ",(0,t.jsx)(r.code,{children:"activemq-data"})," and is reachable through ",(0,t.jsx)(r.code,{children:"vm://localhost"}),". To use a diffent (external) ActiveMQ broker configure ",(0,t.jsx)(r.code,{children:"jms.brokerURL"}),". You can also start an internal ActiveMQ broker by setting ",(0,t.jsx)(r.code,{children:"jms.broker.start=true"})," and set the path to the broker's configuration file in ",(0,t.jsx)(r.code,{children:"jms.broker.config"}),". You can find the default ActiveMQ configuration file ",(0,t.jsx)(r.a,{href:"https://github.com/eluinstra/ebms-core/blob/ebms-core-2.19.x/src/main/resources/nl/clockwork/ebms/activemq.xml",children:"here"}),". If you are using this configuration file, the broker's data is stored in the folder ",(0,t.jsx)(r.code,{children:"data"}),"."]}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.a,{href:"#deliverytaskhandler",children:(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})})," is set to ",(0,t.jsx)(r.code,{children:"JMS"})," configure the ActiveMQ broker with ",(0,t.jsx)(r.code,{children:'schedulerSupport="true"'})]})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.a,{href:"#eventlistener",children:(0,t.jsx)(r.code,{children:"eventListener.type"})})," is set to ",(0,t.jsx)(r.code,{children:"SIMPLE_JMS"}),", ",(0,t.jsx)(r.code,{children:"JMS"}),", or ",(0,t.jsx)(r.code,{children:"JMS_TEXT"})," or ",(0,t.jsx)(r.a,{href:"#deliverytaskhandler",children:(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})})," is set to ",(0,t.jsx)(r.code,{children:"JMS"})," or ",(0,t.jsx)(r.code,{children:"QUARTZ_JMS"})," use (the default) presistent delivery"]})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"jms.brokerURL=vm://localhost\njms.broker.start=false\njms.broker.config=classpath:nl/clockwork/ebms/activemq.xml\njms.broker.username=\njms.broker.password=\njms.pool.minPoolSize=32\njms.pool.maxPoolSize=32\n"})}),"\n",(0,t.jsx)(r.h3,{id:"overflow-attachments-to-disk",children:"Overflow attachments to disk"}),"\n",(0,t.jsxs)(r.p,{children:["Large EbMS attachments will be cached in temporary files if they exceed the ",(0,t.jsx)(r.code,{children:"ebmsMessage.attachment.memoryTreshold"})," which by default is ",(0,t.jsx)(r.code,{children:"128Kb"}),". The temporary files are written to ",(0,t.jsx)(r.code,{children:"ebmsMessage.attachment.outputDirectory"})," if set, otherwise to the default temp directory. To enable file encryption set ",(0,t.jsx)(r.code,{children:"ebmsMessage.attachment.cipherTransformation"})," to a stream or 8-bit block cipher transformation (like RC4, AES/CTR/NoPadding, etc)."]}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsx)(r.p,{children:"Enabling file encryption will result in an increased processing time."})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"ebmsMessage.attachment.memoryTreshold=131072\nebmsMessage.attachment.outputDirectory=\nebmsMessage.attachment.cipherTransformation=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"signature-keystore",children:"Signature keystore"}),"\n",(0,t.jsx)(r.p,{children:"Holds the different signature keys (and related certificates) of the signature certificates defined in the different CPAs the EbMS adapter is using."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# KeystoreType: JCEKS | JKS | DKS | PKCS11 | PKCS12\nsignature.keystore.type=PKCS12\nsignature.keystore.path=nl/clockwork/ebms/keystore.p12\nsignature.keystore.password=password\nsignature.keystore.keyPassword=${signature.keystore.password}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ssl",children:"SSL"}),"\n",(0,t.jsxs)(r.p,{children:["The EbMS HTTP client has the option to use SSL client certificate from the matching CPA when sending a message. You can ",(0,t.jsx)(r.strong,{children:"override"})," a certificate defined in a CPA by creating a ",(0,t.jsx)(r.a,{href:"api#certificatemappingservice",children:"Certificate Mapping"}),". This option can be enabled by setting property ",(0,t.jsx)(r.code,{children:"https.useClientCertificate"})," to true."]}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsxs)(r.p,{children:["This option works ",(0,t.jsx)(r.strong,{children:"ONLY"})," as long as the other (receiving) party will trust the configured SSL client certificate."]})}),"\n",(0,t.jsxs)(r.p,{children:["The EbMS adapter supports SSL client certificate validation. This means that the SSL clientCertificate of the incoming request will be validated against the matching CPA. This option can be enabled by setting property ",(0,t.jsx)(r.code,{children:"https.clientCertificateAuthentication"})," to true."]}),"\n",(0,t.jsx)(r.admonition,{type:"caution",children:(0,t.jsxs)(r.p,{children:["This option ",(0,t.jsx)(r.strong,{children:"ONLY"})," works as long as the other (sending) party uses the SSL client certificates defined in the CPA and the client certificates are trusted in the ",(0,t.jsx)(r.a,{href:"properties#truststore",children:"truststore"}),"."]})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"https.protocols=\nhttps.cipherSuites=\nhttps.verifyHostnames=true\nhttps.clientCertificateAuthentication=false\nhttps.useClientCertificate=false\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ssl-client-keystore",children:"SSL Client keystore"}),"\n",(0,t.jsx)(r.p,{children:"Holds the SSL client keys (and related certificates) used by the EbMS HTTP client."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# KeystoreType: JCEKS | JKS | DKS | PKCS11 | PKCS12\nclient.keystore.type=PKCS12\nclient.keystore.path=nl/clockwork/ebms/keystore.p12\nclient.keystore.password=password\nclient.keystore.keyPassword=${client.keystore.password}\nclient.keystore.defaultAlias=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"transactionmanager",children:"TransactionManager"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.a,{href:"#deliverytaskhandler",children:(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})})," is set to ",(0,t.jsx)(r.code,{children:"DEFAULT"})," or ",(0,t.jsx)(r.code,{children:"QUARTZ"})," then set ",(0,t.jsx)(r.code,{children:"transactionManager.type=DEFAULT"}),". When ",(0,t.jsx)(r.a,{href:"#deliverytaskhandler",children:(0,t.jsx)(r.code,{children:"deliveryTaskHandler.type"})})," is set to ",(0,t.jsx)(r.code,{children:"JMS"})," or ",(0,t.jsx)(r.code,{children:"QUARTZ_JMS"})," then set ",(0,t.jsx)(r.code,{children:"transactionManager.type=ATOMIKOS"})," and select an XA driver for your ",(0,t.jsx)(r.a,{href:"database",children:"database"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# TransactionManagerType: DEFAULT | ATOMIKOS\ntransactionManager.type=DEFAULT\n# IsolationLevel: <EMPTY> | TRANSACTION_NONE | TRANSACTION_READ_UNCOMMITTED | TRANSACTION_READ_COMMITTED | TRANSACTION_REPEATABLE_READ | TRANSACTION_SERIALIZABLE | TRANSACTION_SQL_SERVER_SNAPSHOT_ISOLATION_LEVEL\ntransactionManager.isolationLevel=\ntransactionManager.transactionTimeout=300\n"})}),"\n",(0,t.jsx)(r.h3,{id:"truststore",children:"Truststore"}),"\n",(0,t.jsx)(r.p,{children:"Holds all trusted SSL, Signature and Encryption certificates."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# TruststoreType: JCEKS | JKS | DKS | PKCS11 | PKCS12\ntruststore.type=PKCS12\ntruststore.path=nl/clockwork/ebms/truststore.p12\ntruststore.password=password\n"})}),"\n",(0,t.jsx)(r.h3,{id:"microsoft-azure-key-vault-based-keystore",children:"Microsoft Azure Key Vault based keystore"}),"\n",(0,t.jsxs)(r.p,{children:["(since ",(0,t.jsx)(r.a,{href:"release#ebms-core-2177jar",children:"v2.17.7"}),")\nAzure keyvault can store the private keys and therefore be a substitute for the client and signature keystores.\nBy setting the property ",(0,t.jsx)(r.code,{children:"keystores.type"})," to ",(0,t.jsx)(r.code,{children:"AZURE"})," it will ignore the remaining ",(0,t.jsx)(r.code,{children:"signature.keystore"})," and ",(0,t.jsx)(r.code,{children:"client.keystore"})," properties except for the ",(0,t.jsx)(r.code,{children:"defaultAlias"}),".\nBy default these properties are commented-out."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# TruststoreType: AZURE | ..\n# keystores.type=AZURE\n\n# Keyvault uri is the full https uri of the keyvault to be used, e.g. https://key.vault.azure.net\n# azure.keyvault.uri=\n\n# Tennant id is the guid of the tennant/organisation where the keyvault is created, e.g. f487d075-71f0-486a-beab-7e8d3f873be5\n# azure.keyvault.tennantid=\n\n# The clientid of the (application) registered, which should have sufficient privileges on the keyvault, e.g. https://digipoort\n# azure.keyvault.clientid=\n\n# The client secret as generated by azure, e.g. _17c.3xulKW~2crwjVTFRT8n-5LKo44uF5\n# azure.keyvault.client.secret=\n"})}),"\n",(0,t.jsx)(r.h3,{id:"apache-kafka",children:"Apache Kafka"}),"\n",(0,t.jsxs)(r.p,{children:["(since ",(0,t.jsx)(r.a,{href:"release#ebms-core-2182jar",children:"v2.18.2"}),")\nThe Apache Kafka implementation is currently integrated as provided by Cap Gemini.\nIt allows for the delivery task to be triggered on a Kafka topic.. The topic name is currently fixed ",(0,t.jsx)(r.code,{children:"DELIVERY_TASK"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# DeliveryTaskHandlerType = DEFAULT(=DAO) | JMS | QUARTZ | QUARTZ_JMS | QUARTZ_KAFKA\ndeliveryTaskHandler.type=QUARTZ_KAFKA\n\n# server url \nkafka.serverUrl=localhost:9092\n\n"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>o});var n=s(6540);const t={},i=n.createContext(t);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);